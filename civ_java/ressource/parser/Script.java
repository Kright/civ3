/* Generated By:JavaCC: Do not edit this line. Script.java */
package ressource.parser;

import java.util.List;
import java.util.LinkedList;
import java.util.Iterator;
import java.util.HashMap;
import java.io.*;

public class Script implements ScriptConstants {

        public static class Data {

        /*	REALLYQUIT
	#wave 43
	#caption Oh non!
	Voulez-vous vraiment quitter la partie?
	#itemlist
	Non, pas vraiment.
	Oui, sur-le-champ!
	*/
                        public int wave = -1;
                        public int map_center = -1;
                        public String caption;
                        public String text;
                        public List itemlist;

                        public String toString()
                        {
                                return "Script.Data"
                                                + " wave=" + wave
                                                + " map_center=" + map_center
                                                + " caption=" + caption
                                                + " text=" + text
                                                + " itemlist=" + itemlist
                                                ;
                        }

        }


  public boolean verbose = false ;

  public HashMap result = new HashMap();

        public Script.Data get( String key )
        {
                Script.Data s = (Script.Data)result.get( key );
                return s;
        }

  public static void main(String args[]) throws ParseException {

        java.io.InputStream stream=null;

        if (args.length == 0)
                stream = System.in;
        else{
                try {
                stream = new BufferedInputStream(
                                new FileInputStream(args[0]));
                }catch (FileNotFoundException e) {}
        }

    Script parser = new Script(stream);

    parser.verbose = true;
    parser.Input();

    System.out.println("\n\n\n********* testing result *********");

    final String test_key[] = {
        "REALLYQUIT",
        "REALLYRETIRE" };

    for (int i=0;i<test_key.length;i++)
    {

                Script.Data s = parser.get( test_key[i] );
        System.out.println( test_key[i] + "\n  => " + s );

    }

  }

  final public void Input() throws ParseException {
    ExpressionList();
  }

  final public void ExpressionList() throws ParseException {
          if (verbose) System.out.println("Starting text parser");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
      case DIESE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Expression();
    }
    jj_consume_token(0);
  }

  final public void Expression() throws ParseException {
        String key=null;
        Object value=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    case DIESE:
      key = une_clef();
      value = une_valeur();
                if (key!=null && value!=null)
                        result.put( key, value );
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String une_clef() throws ParseException {
        Token t=null;
    jj_consume_token(DIESE);
    t = jj_consume_token(KEY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      jj_consume_token(TEXT);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    nextline();
                        if (verbose) System.out.println("found key :" + (t==null ? "null" : t.image));
                        {if (true) return (t==null ? null : t.image);}
    throw new Error("Missing return statement in function");
  }

  final public int un_nombre() throws ParseException {
        Token t;
    t = jj_consume_token(NOMBRE);
                        {if (true) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public void nextline() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public int map_center() throws ParseException {
        int x;
    jj_consume_token(MAP_CENTER);
    x = un_nombre();
        {if (true) return x;}
    throw new Error("Missing return statement in function");
  }

  final public Script.Data une_valeur() throws ParseException {
        Token t=null;
        Script.Data data = new Script.Data();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIESE:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(DIESE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAP_CENTER:
        map_center();
        break;
      case WAVE:
        jj_consume_token(WAVE);
        data.wave = un_nombre();
        break;
      case XS:
        jj_consume_token(XS);
        jj_consume_token(NOMBRE);
        break;
      case CAPTION:
        jj_consume_token(CAPTION);
        jj_consume_token(TEXT);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      nextline();
    }
    t = jj_consume_token(TEXT);
    nextline();
                        data.text = t.image;
                        if (verbose) System.out.println("    => value :" + data);
                        {if (true) return data;}
    throw new Error("Missing return statement in function");
  }

  public ScriptTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1800,0x1800,0x80000,0x801,0x1000,0x1e000,};
   }

  public Script(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ScriptTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public Script(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ScriptTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public Script(ScriptTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  public void ReInit(ScriptTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[20];
    for (int i = 0; i < 20; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
