
options {
 JAVA_UNICODE_ESCAPE = false;
 UNICODE_INPUT = true;
 USER_CHAR_STREAM = false;
 STATIC = false;
}


PARSER_BEGIN(Script)


package ressource.parser;

import java.util.List;
import java.util.LinkedList;
import java.util.Iterator;
import java.util.HashMap;
import java.io.*;

public class Script {

	public static class Data {
	
	/*	REALLYQUIT
	#wave 43
	#caption Oh non!
	Voulez-vous vraiment quitter la partie?
	#itemlist
	Non, pas vraiment.
	Oui, sur-le-champ!
	*/
			public int wave = -1;
			public int map_center = -1;
			public String caption;
			public String text;
			public List itemlist;
			
			public String toString()
			{
				return "Script.Data"
						+ " wave=" + wave
						+ " map_center=" + map_center
						+ " caption=" + caption
						+ " text=" + text
						+ " itemlist=" + itemlist
						;
			}
	
	}
	

  public boolean verbose = false ;
  
  public HashMap result = new HashMap();
	
	public Script.Data get( String key )
	{
		Script.Data s = (Script.Data)result.get( key );
		return s;
	}

  public static void main(String args[]) throws ParseException {
  
  	java.io.InputStream stream=null; 
  	
  	if (args.length == 0)
  		stream = System.in;
  	else{ 		
  		try { 
  		stream = new BufferedInputStream( 
  				new FileInputStream(args[0]));	
  		}catch (FileNotFoundException e) {}
  	}
  	
    Script parser = new Script(stream);
    
    parser.verbose = true;
    parser.Input();
    
    System.out.println("\n\n\n********* testing result *********");
    
    final String test_key[] = { 
    	"REALLYQUIT", 
    	"REALLYRETIRE" };
    
    for (int i=0;i<test_key.length;i++)
    {
    
   		Script.Data s = parser.get( test_key[i] );
    	System.out.println( test_key[i] + "\n  => " + s );
    	
    }
    
  }

}

PARSER_END(Script)


MORE : {

    ";": IN_SINGLE_LINE_COMMENT }



MORE : {

    "##": IN_SINGLE_LINE_COMMENT }
    

MORE : {

    "# ": IN_SINGLE_LINE_COMMENT }  
  
MORE : {

    "#comment": IN_SINGLE_LINE_COMMENT }  

< IN_SINGLE_LINE_COMMENT > SPECIAL_TOKEN : {

    < SINGLE_LINE_COMMENT: "\n"|"\r"|"\r\n" > : DEFAULT }

      

< IN_SINGLE_LINE_COMMENT > MORE : {

    <  ~[] > }
    
    
SKIP :
{
  "\t"
| " "
| "\r"
| "\n"
}

TOKEN :
{
  < EOL : "\n"|"\r"|"\r\n" >
| < DIESE : "#" >
| < WAVE : "wave" >
| < CAPTION : "caption" >  
| < MAP_CENTER : "map_center" >
| < XS : "xs" >
| < NOMBRE : (["0"-"9"])+ >
| < KEY :   (["_","a"-"z","A"-"Z","0"-"9"])+ >
| < TEXT :  (~["\r","\n"])+ >
//| < TEXT : ~["#",";","\r","\n"] (~["\r","\n"])* >


  

}

void Input() :
{ }
{
 
  ExpressionList() 
 
 
}



void ExpressionList() :
{
	
}
{
	{
	  if (verbose) System.out.println("Starting text parser");
	}
  ( Expression() )*
  <EOF>
}

void Expression() :
{
	String key=null;
	Object value=null;
   }
{
	
	<EOL>

|	
	
 	key=une_clef()

	( value=une_valeur() )
	{
		if (key!=null && value!=null)
			result.put( key, value );
	}

		
  
}

String une_clef() :
{
	Token t=null;
   }
{
	

		
	<DIESE> (t=<KEY>) (<TEXT>)? nextline()
		{
			if (verbose) System.out.println("found key :" + (t==null ? "null" : t.image));	
		 	return (t==null ? null : t.image);
		}


		
	
}

int un_nombre() :
{	
	Token t;
   }
{
	

		
	t=<NOMBRE>
		{
			return Integer.parseInt(t.image);
		}


		
	
}

void nextline() :
{
}
{
	( <EOL> | <EOF> )
}

int map_center() :
{
	int x;
}
{
  <MAP_CENTER> x=un_nombre() 
  {
  	return x;
  }
  
}
	
	

Script.Data une_valeur() :
{
	Token t=null;
	Script.Data data = new Script.Data();
	
/*	REALLYQUIT
	#wave 43
	#caption Oh non!
	Voulez-vous vraiment quitter la partie?
	#itemlist
	Non, pas vraiment.
	Oui, sur-le-champ!
	*/
	
	//LOOKAHEAD(2)
   }
{
		( <DIESE>
		
			(
					(  map_center() )
				|	(  <WAVE> data.wave=un_nombre() ) 
				|	(  <XS> <NOMBRE> ) 
				|	(  <CAPTION> <TEXT> )
			)
			
			nextline() 
		)*
		
		
		((t=<TEXT>) nextline())
		{
			data.text = t.image;
		}
		
		
		
		
		
		{
			if (verbose) System.out.println("    => value :" + data);	
		 	return data;
		}
}




